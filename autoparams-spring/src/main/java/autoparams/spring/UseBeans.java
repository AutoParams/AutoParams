package autoparams.spring;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import autoparams.customization.CustomizerSource;

/**
 * Indicates that parameters of a test method should be resolved from the
 * <a href="https://spring.io">Spring</a> application context if they are
 * Spring-managed beans. AutoParams will generate parameters that are not beans
 * as usual.
 * <p>
 * This annotation allows seamless integration of Spring-managed beans and
 * AutoParams-generated values within the same test method. It is typically used
 * in conjunction with AutoParams and Spring testing annotations like
 * {@code @SpringBootTest}.
 * </p>
 *
 * <p>
 * <b>Example: Injecting a Spring bean and generating test data</b>
 * </p>
 * <p>
 * This example shows how to use {@link UseBeans @UseBeans} to inject a
 * {@code MessageSupplier} bean from the Spring context, while the {@code name}
 * parameter is automatically generated by AutoParams.
 * </p>
 * <pre>
 * public interface MessageSupplier {
 *     String getMessage(String name);
 * }
 * </pre>
 *
 * <pre>
 * &#64;Component
 * public class HelloSupplier implements MessageSupplier {
 *     &#64;Override
 *     public String getMessage(String name) {
 *         return "Hello, " + name + "!";
 *     }
 * }
 * </pre>
 *
 * <pre>
 * // Example test class
 * &#64;SpringBootTest
 * public class TestClass {
 *
 *     &#64;Test
 *     &#64;AutoParams
 *     &#64;UseBeans
 *     void testMethod(MessageSupplier service, String name) {
 *         String message = service.getMessage(name);
 *         assertTrue(message.startsWith("Hello"));
 *         assertTrue(message.contains(name));
 *     }
 * }
 * </pre>
 * <p>
 * In this scenario, {@code service} will be an instance of a bean that
 * implements {@code MessageSupplier} from the Spring application context, and
 * {@code name} will be a randomly generated string.
 * </p>
 */
@Target({
    ElementType.ANNOTATION_TYPE,
    ElementType.METHOD,
    ElementType.PARAMETER
})
@Retention(RetentionPolicy.RUNTIME)
@CustomizerSource(SpringCustomizerFactory.class)
public @interface UseBeans {
}
