package autoparams;

import java.lang.annotation.Annotation;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * An annotation that stops {@link AutoSource} from generating values for
 * parameters starting from the first parameter annotated with any of the
 * specified annotation types.
 * <p>
 * When applied to a test method, this annotation instructs {@link AutoSource}
 * to defer parameter resolution for any parameters that appear after (and
 * including) the first parameter annotated with one of the specified annotation
 * types, allowing other registered parameter resolvers to handle them instead.
 * </p>
 * <p>
 * This is useful when you want to combine {@link AutoSource} with other
 * parameter resolvers in a single test method, while controlling the point at
 * which {@link AutoSource} stops generating values and hands off to other
 * resolvers.
 * </p>
 *
 * <p><b>Example:</b></p>
 * <p>
 * This example demonstrates how to use {@link BrakeBeforeAnnotation} to let
 * {@link AutoSource} handle the first two parameters, while a custom extension
 * handles the third parameter.
 * </p>
 * <pre>
 * &#64;ParameterizedTest
 * &#64;AutoSource
 * &#64;BrakeBeforeAnnotation(ResolveWithExtension.class)
 * &#64;ExtendWith(StringExtension.class)
 * void testMethod(UUID arg1, int arg2, &#64;ResolveWithExtension String arg3) {
 *     // arg1 and arg2 are generated by &#64;AutoSource
 *     // arg3 (and any parameters after it) are handled by StringExtension
 * }
 * </pre>
 */
@Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
@Retention(RetentionPolicy.RUNTIME)
@BrakeWith(AnnotationBrake.class)
public @interface BrakeBeforeAnnotation {

    /**
     * The annotation types that signal {@link AutoSource} to stop parameter
     * resolution.
     * <p>
     * When a parameter annotated with any of these annotation types is
     * encountered, {@link AutoSource} will not generate values for that
     * parameter or any following parameters in the method signature.
     * </p>
     *
     * @return an array of annotation types that trigger the brake
     */
    Class<? extends Annotation>[] value();
}
