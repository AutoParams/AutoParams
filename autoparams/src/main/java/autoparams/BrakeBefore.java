package autoparams;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.reflect.Parameter;
import java.util.function.Predicate;

/**
 * An annotation that stops {@link AutoSource} from generating values for
 * parameters that match a specific predicate and any parameters that follow.
 * <p>
 * When applied to a test method, this annotation instructs
 * {@link AutoSource} to defer parameter resolution when it encounters a
 * parameter matching the specified predicate. The matching parameter and all
 * following parameters will be handled by other registered parameter resolvers
 * instead.
 * </p>
 * <p>
 * This is useful when you want to combine {@link AutoSource} with other
 * parameter resolvers in a single test method, while maintaining control over
 * where the parameter generation stops.
 * </p>
 *
 * <p><b>Example:</b></p>
 * <p>
 * This example demonstrates how to use {@link BrakeBefore} to let
 * {@link AutoSource} generate values for the first two parameters, while a
 * custom extension handles the third parameter.
 * </p>
 * <pre>
 * &#64;ParameterizedTest
 * &#64;AutoSource
 * &#64;BrakeBefore(StringPredicate.class)
 * &#64;ExtendWith(StringExtension.class)
 * void testMethod(UUID arg1, int arg2, String arg3) {
 *     // arg1 and arg2 are generated by &#64;AutoSource
 *     // arg3 is resolved by StringExtension
 * }
 * </pre>
 *
 * @see PredicateBrake
 */
@Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD })
@Retention(RetentionPolicy.RUNTIME)
@BrakeWith(PredicateBrake.class)
public @interface BrakeBefore {

    /**
     * The predicate that determines which parameter type triggers
     * {@link AutoSource} to stop generating values.
     * <p>
     * When a parameter matches this predicate, {@link AutoSource} will not
     * generate values for that parameter or any subsequent parameters in the
     * method signature.
     * </p>
     *
     * @return a predicate class that tests parameters
     */
    Class<? extends Predicate<Parameter>> value();
}
