package autoparams;

import java.beans.ConstructorProperties;
import java.lang.reflect.Parameter;
import java.lang.reflect.Type;
import java.util.Optional;

public final class ParameterQuery implements ObjectQuery {

    private final Parameter parameter;
    private final int index;
    private final Type type;

    public ParameterQuery(Parameter parameter, int index, Type type) {
        this.parameter = parameter;
        this.index = index;
        this.type = type;
    }

    public Parameter getParameter() {
        return parameter;
    }

    public int getIndex() {
        return index;
    }

    @Override
    public Type getType() {
        return type;
    }

    public Optional<String> getParameterName() {
        if (parameter.isNamePresent()) {
            return Optional.of(parameter.getName());
        } else {
            return Optional
                .ofNullable(parameter
                    .getDeclaringExecutable()
                    .getDeclaredAnnotation(ConstructorProperties.class))
                .map(ConstructorProperties::value)
                .map(names -> names[index]);
        }
    }

    public String getRequiredParameterName() {
        return getParameterName().orElseThrow(() -> {
            String message = String.format(
                "Unable to determine the parameter name at index %d of executable %s.\n\n"
                    + "Some features require parameter names to be available at runtime. "
                    + "However, Java does not include parameter names in bytecode by default. "
                    + "To ensure this works correctly, you can:\n\n"
                    + "1. Use a record class, which preserves parameter names by design.\n"
                    + "2. Compile the code with the -parameters option using javac. "
                    + "If you're using Spring Boot, this option is automatically "
                    + "enabled when you use the Spring Boot Gradle plugin "
                    + "(https://docs.spring.io/spring-boot/gradle-plugin/"
                    + "reacting.html#reacting-to-other-plugins.java) "
                    + "or the Spring Boot Maven plugin "
                    + "(https://docs.spring.io/spring-boot/maven-plugin/using.html#using).\n"
                    + "3. Apply the @ConstructorProperties annotation to "
                    + "explicitly declare parameter names.\n"
                    + "   If you're using Lombok and the constructor is generated by "
                    + "a Lombok annotation such as @AllArgsConstructor, this annotation can be "
                    + "automatically added by enabling:\n"
                    + "   lombok.anyConstructor.addConstructorProperties = true\n"
                    + "   See: https://projectlombok.org/features/constructor",
                index,
                parameter.getDeclaringExecutable()
            );
            return new RuntimeException(message);
        });
    }

    @Override
    public String toString() {
        return parameter.toString();
    }
}
