package autoparams.kotlin

import java.util.stream.Stream
import autoparams.ValueAutoArgumentsProvider
import autoparams.ValueAutoSource
import org.junit.jupiter.api.extension.ExtensionContext
import org.junit.jupiter.params.provider.Arguments
import org.junit.jupiter.params.provider.ArgumentsProvider
import org.junit.jupiter.params.support.AnnotationConsumer

/**
 * An [ArgumentsProvider] and [AnnotationConsumer] for [ValueAutoKotlinSource].
 *
 * This class provides arguments for JUnit 5 parameterized tests, sourcing them
 * from literal values defined in a [ValueAutoKotlinSource] annotation. It
 * adapts the functionality of [ValueAutoArgumentsProvider] for Kotlin tests,
 * allowing any remaining parameters not covered by the literal values to be
 * automatically generated by AutoParams, with Kotlin-specific considerations.
 *
 * @see ValueAutoKotlinSource
 * @see ValueAutoArgumentsProvider
 */
class ValueAutoKotlinArgumentsProvider :
    ArgumentsProvider,
    AnnotationConsumer<ValueAutoKotlinSource> {

    private val provider = ValueAutoArgumentsProvider()

    /**
     * Provides a stream of arguments for a parameterized test.
     *
     * This method delegates to an underlying [ValueAutoArgumentsProvider] to
     * provide arguments sourced from literal values and supplemented by
     * AutoParams for any remaining parameters, with Kotlin-specific
     * considerations.
     *
     * @param context The extension context for the current test.
     * @return A stream of [Arguments] to be used by the parameterized test.
     */
    override fun provideArguments(
        context: ExtensionContext?
    ): Stream<out Arguments> = provider.provideArguments(context)

    /**
     * Consumes the [ValueAutoKotlinSource] annotation to configure the
     * underlying argument provider.
     *
     * This method extracts literal values from the provided
     * [ValueAutoKotlinSource] annotation and uses them to configure an internal
     * [ValueAutoArgumentsProvider]. This setup allows the provider to correctly
     * source arguments from the specified literal values and combine them with
     * automatically generated arguments for Kotlin parameterized tests.
     *
     * @param annotation The [ValueAutoKotlinSource] annotation instance to
     *                   consume.
     */
    override fun accept(annotation: ValueAutoKotlinSource) {
        provider.accept(
            ValueAutoSource.ProxyFactory.create(
                annotation.shorts,
                annotation.bytes,
                annotation.ints,
                annotation.longs,
                annotation.floats,
                annotation.doubles,
                annotation.chars,
                annotation.booleans,
                annotation.strings,
                annotation.classes.map { it.java }.toTypedArray()
            )
        )
    }
}
