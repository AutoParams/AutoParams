package autoparams.kotlin

import java.lang.reflect.Proxy
import autoparams.customization.Customization
import org.junit.jupiter.params.provider.ArgumentsSource
import org.junit.jupiter.params.provider.EnumSource
import kotlin.reflect.KClass

/**
 * An extension of [org.junit.jupiter.params.provider.EnumSource] tailored for
 * Kotlin parameterized tests, integrating with AutoParams to provide
 * automatically generated arguments for parameters not covered by the enum
 * constants.
 *
 * This annotation allows you to specify an enum class as the source of
 * arguments for a parameterized test. For each enum constant (or a subset based
 * on [names] and [mode]), a new invocation of the parameterized test will be
 * scheduled. The first parameter of the test method will be populated with the
 * enum constant. AutoParams will automatically generate any remaining
 * parameters with Kotlin-specific considerations.
 *
 * **Example: Using EnumAutoKotlinSource in a parameterized test**
 *
 * This example demonstrates how [EnumAutoKotlinSource] can be used to iterate
 * over enum constants while additional parameters are automatically generated.
 *
 * ```kotlin
 * enum class GreetingType {
 *     WELCOME,
 *     FAREWELL
 * }
 *
 * class GreetingTests {
 *     @ParameterizedTest
 *     @EnumAutoKotlinSource(GreetingType::class)
 *     fun testGreetingGeneration(greetingType: GreetingType, message: String) {
 *         // The test is executed once for each enum constant (WELCOME, FAREWELL)
 *         // greetingType is set to the current enum constant
 *         // message is automatically generated by AutoParams
 *     }
 * }
 * ```
 *
 * @param value The enum class from which constants will be sourced.
 * @param names An array of enum constant names to include or exclude based on
 *              the [mode]. If empty, all constants are considered (unless
 *              [mode] dictates otherwise).
 * @param mode The mode to determine how [names] are used.
 *
 * @see autoparams.EnumAutoSource
 * @see EnumAutoKotlinArgumentsProvider
 * @see KotlinCustomizer
 * @see org.junit.jupiter.params.provider.EnumSource
 */
@Target(AnnotationTarget.ANNOTATION_CLASS, AnnotationTarget.FUNCTION)
@Retention(AnnotationRetention.RUNTIME)
@ArgumentsSource(EnumAutoKotlinArgumentsProvider::class)
@Customization(KotlinCustomizer::class)
annotation class EnumAutoKotlinSource(
    val value: KClass<out Enum<*>>,
    val names: Array<String> = [],
    val mode: EnumSource.Mode = EnumSource.Mode.INCLUDE
) {

    /**
     * A companion object that serves as a factory for creating proxy instances
     * of [EnumAutoKotlinSource].
     *
     * This factory can be used when extending the functionality of
     * [EnumAutoKotlinArgumentsProvider]. It allows for the programmatic
     * construction of [EnumAutoKotlinSource] annotation instances, enabling
     * dynamic configuration of enum sources for parameterized tests in Kotlin.
     */
    companion object ProxyFactory {

        /**
         * Creates a new proxy instance of [EnumAutoKotlinSource]
         * programmatically.
         *
         * This factory method constructs a proxy for the [EnumAutoKotlinSource]
         * annotation using the specified enum class, names, and mode. This
         * allows the framework to work with these properties as if they were
         * declared directly on a test method.
         *
         * @param value The enum class from which constants will be sourced.
         * @param names An array of enum constant names to include or exclude
         *              based on the [mode].
         * @param mode The mode to determine how [names] are used.
         * @return A new proxy instance of [EnumAutoKotlinSource] configured
         *         with the provided properties.
         */
        fun create(
            value: KClass<out Enum<*>>,
            names: Array<String>,
            mode: EnumSource.Mode
        ): EnumAutoKotlinSource = Proxy.newProxyInstance(
            EnumAutoKotlinSource::class.java.classLoader,
            arrayOf(EnumAutoKotlinSource::class.java)
        ) { _, method, _ ->
            when (method.name) {
                "annotationType" -> EnumAutoKotlinSource::class.java
                "value" -> value.java
                "names" -> names
                "mode" -> mode
                else -> method.defaultValue
            }
        } as EnumAutoKotlinSource
    }
}
