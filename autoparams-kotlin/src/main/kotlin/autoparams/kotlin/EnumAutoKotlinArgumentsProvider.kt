package autoparams.kotlin

import java.util.stream.Stream
import autoparams.EnumAutoArgumentsProvider
import autoparams.EnumAutoSource
import org.junit.jupiter.api.extension.ExtensionContext
import org.junit.jupiter.params.provider.Arguments
import org.junit.jupiter.params.provider.ArgumentsProvider
import org.junit.jupiter.params.support.AnnotationConsumer

/**
 * An [ArgumentsProvider] and [AnnotationConsumer] for [EnumAutoKotlinSource].
 *
 * This class provides arguments for JUnit 5 parameterized tests, sourcing them
 * from enum constants defined in an [EnumAutoKotlinSource] annotation. It
 * adapts the functionality of [autoparams.EnumAutoArgumentsProvider] for Kotlin
 * tests, allowing any remaining parameters not covered by the enum constants to
 * be automatically generated by AutoParams, with Kotlin-specific
 * considerations.
 *
 * @see EnumAutoKotlinSource
 * @see EnumAutoArgumentsProvider
 */
class EnumAutoKotlinArgumentsProvider :
    ArgumentsProvider,
    AnnotationConsumer<EnumAutoKotlinSource> {

    private val provider = EnumAutoArgumentsProvider()

    /**
     * Provides a stream of arguments for a parameterized test.
     *
     * This method delegates to an underlying [EnumAutoArgumentsProvider] to
     * provide arguments sourced from enum constants and supplemented by
     * AutoParams for any remaining parameters, with Kotlin-specific
     * considerations.
     *
     * @param context The extension context for the current test.
     * @return A stream of [Arguments] to be used by the parameterized test.
     */
    override fun provideArguments(
        context: ExtensionContext
    ): Stream<out Arguments> = provider.provideArguments(context)

    /**
     * Consumes the [EnumAutoKotlinSource] annotation to configure the
     * underlying argument provider.
     *
     * This method extracts enum-related attributes from the provided
     * [EnumAutoKotlinSource] annotation and uses them to configure an internal
     * [autoparams.EnumAutoArgumentsProvider]. This setup allows the provider to
     * correctly source arguments from the specified enum constants and combine
     * them with automatically generated arguments for Kotlin parameterized
     * tests.
     *
     * @param annotation The [EnumAutoKotlinSource] annotation instance to
     *                   consume.
     */
    override fun accept(annotation: EnumAutoKotlinSource) {
        provider.accept(
            EnumAutoSource.ProxyFactory.create(
                annotation.value.java,
                annotation.names,
                annotation.mode
            )
        )
    }
}
