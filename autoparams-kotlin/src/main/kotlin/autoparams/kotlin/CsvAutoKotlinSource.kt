package autoparams.kotlin

import java.lang.reflect.Proxy
import autoparams.customization.Customization
import org.junit.jupiter.params.provider.ArgumentsSource

/**
 * An extension of [org.junit.jupiter.params.provider.CsvSource] tailored for
 * Kotlin parameterized tests, integrating with AutoParams to provide
 * automatically generated arguments for parameters not covered by the CSV data.
 *
 * This annotation allows you to define test inputs in a CSV format directly
 * within your test method's annotations. For each row in the CSV, a new
 * invocation of the parameterized test will be scheduled. Parameters of the
 * test method will be populated from the corresponding values in the CSV row.
 * AutoParams will automatically generate any parameters not supplied by the CSV
 * data, with Kotlin-specific considerations.
 *
 * This is similar to [autoparams.CsvAutoSource] but is specifically designed
 * for Kotlin, leveraging [CsvAutoKotlinArgumentsProvider] and
 * [KotlinCustomizer].
 *
 * **Example: Using CsvAutoKotlinSource in a parameterized test**
 *
 * This example demonstrates how [CsvAutoKotlinSource] can be used to provide
 * explicit values for `name` and `price` from a CSV-like structure, while `id`
 * is automatically generated by AutoParams for each test case.
 *
 * ```kotlin
 * data class Product(val id: UUID, val name: String, val price: BigDecimal)
 *
 * class ProductTests {
 *
 *     @ParameterizedTest
 *     @CsvAutoKotlinSource(
 *         value = [
 *             "Product A, 100.00",
 *             "Product B, 250.50"
 *         ]
 *     )
 *     fun `test product creation with mixed explicit and auto-generated values`(
 *         name: String,
 *         price: BigDecimal,
 *         id: UUID // Auto-generated by AutoParams
 *     ) {
 *         val product = Product(id, name, price)
 *         assertNotNull(product.id)
 *         assertTrue(name.startsWith("Product"))
 *         assertTrue(price.compareTo(BigDecimal.ZERO) > 0)
 *     }
 * }
 * ```
 *
 * The `value` parameter takes an array of strings, where each string is a CSV
 * record. Alternatively, `textBlock` can be used for a multi-line string
 * representation of the CSV data. Other parameters of the annotation allow
 * customization of the CSV parsing behavior, such as specifying a delimiter,
 * quote character, and how to handle empty or null values.
 *
 * @param value An array of strings, where each string represents a CSV record.
 * @param textBlock A multi-line string (text block) representing the CSV data.
 *                  If not empty, this takes precedence over `value`.
 * @param useHeadersInDisplayName If `true`, the first row of the CSV (headers)
 *                                will be used in the display name of the test
 *                                invocations.
 * @param quoteCharacter The character used to quote values in the CSV data.
 * @param delimiter The character used to separate values in a CSV record.
 *                  Overridden by `delimiterString` if it's not empty.
 * @param delimiterString The string used to separate values in a CSV record.
 *                        Takes precedence over `delimiter`.
 * @param emptyValue The string representation of an empty value. This will be
 *                   converted to `null` for non-String types, or an empty
 *                   string for String types.
 * @param nullValues A list of strings that should be interpreted as `null`
 *                   values.
 * @param maxCharsPerColumn The maximum number of characters allowed per column
 *                          during parsing.
 * @param ignoreLeadingAndTrailingWhitespace If `true`, whitespace at the
 *                                           beginning and end of unquoted
 *                                           values will be ignored.
 *
 * @see autoparams.CsvAutoSource
 * @see CsvAutoKotlinArgumentsProvider
 * @see KotlinCustomizer
 * @see org.junit.jupiter.params.provider.CsvSource
 */
@Target(AnnotationTarget.ANNOTATION_CLASS, AnnotationTarget.FUNCTION)
@Retention(AnnotationRetention.RUNTIME)
@ArgumentsSource(CsvAutoKotlinArgumentsProvider::class)
@Customization(KotlinCustomizer::class)
annotation class CsvAutoKotlinSource(
    val value: Array<String> = [],
    val textBlock: String = "",
    val useHeadersInDisplayName: Boolean = false,
    val quoteCharacter: Char = '\'',
    val delimiter: Char = '\u0000',
    val delimiterString: String = "",
    val emptyValue: String = "",
    val nullValues: Array<String> = [],
    val maxCharsPerColumn: Int = 4096,
    val ignoreLeadingAndTrailingWhitespace: Boolean = true
) {

    /**
     * A companion object that serves as a factory for creating proxy instances
     * of [CsvAutoKotlinSource].
     *
     * This factory can be used when extending the functionality of
     * [CsvAutoKotlinArgumentsProvider]. It allows for the programmatic
     * construction of [CsvAutoKotlinSource] annotation instances, enabling
     * dynamic configuration of CSV data sources for parameterized tests in
     * Kotlin.
     */
    companion object ProxyFactory {

        /**
         * Creates a new proxy instance of [CsvAutoKotlinSource]
         * programmatically.
         *
         * This factory method is used internally to construct a proxy for the
         * [CsvAutoKotlinSource] annotation with the specified CSV properties.
         * This allows the framework to work with these properties as if they
         * were declared directly on a test method.
         *
         * @param value An array of strings, where each string represents a CSV
         *              record.
         * @param textBlock A multi-line string (text block) representing the
         *                  CSV data.
         * @param useHeadersInDisplayName If `true`, the first row of the CSV
         *                                (headers) will be used in the display
         *                                name.
         * @param quoteCharacter The character used to quote values in the CSV
         *                       data.
         * @param delimiter The character used to separate values in a CSV
         *                  record.
         * @param delimiterString The string used to separate values in a CSV
         *                        record.
         * @param emptyValue The string representation of an empty value.
         * @param nullValues A list of strings that should be interpreted as
         *                   `null`.
         * @param maxCharsPerColumn The maximum number of characters allowed per
         *                          column.
         * @param ignoreLeadingAndTrailingWhitespace If `true`, leading/trailing
         *                                           whitespace in unquoted
         *                                           values will be ignored.
         * @return A new proxy instance of [CsvAutoKotlinSource] configured with
         *         the provided properties.
         */
        fun create(
            value: Array<String>,
            textBlock: String,
            useHeadersInDisplayName: Boolean,
            quoteCharacter: Char,
            delimiter: Char,
            delimiterString: String,
            emptyValue: String,
            nullValues: Array<String>,
            maxCharsPerColumn: Int,
            ignoreLeadingAndTrailingWhitespace: Boolean
        ): CsvAutoKotlinSource = Proxy.newProxyInstance(
            CsvAutoKotlinSource::class.java.classLoader,
            arrayOf(CsvAutoKotlinSource::class.java)
        ) { _, method, _ ->
            when (method.name) {
                "annotationType" -> CsvAutoKotlinSource::class.java
                "value" -> value
                "textBlock" -> textBlock
                "useHeadersInDisplayName" -> useHeadersInDisplayName
                "quoteCharacter" -> quoteCharacter
                "delimiter" -> delimiter
                "delimiterString" -> delimiterString
                "emptyValue" -> emptyValue
                "nullValues" -> nullValues
                "maxCharsPerColumn" -> maxCharsPerColumn
                "ignoreLeadingAndTrailingWhitespace" -> ignoreLeadingAndTrailingWhitespace
                else -> method.defaultValue
            }
        } as CsvAutoKotlinSource
    }
}
