package autoparams.kotlin

import java.util.stream.Stream
import autoparams.CsvAutoArgumentsProvider
import autoparams.CsvAutoSource
import org.junit.jupiter.api.extension.ExtensionContext
import org.junit.jupiter.params.provider.Arguments
import org.junit.jupiter.params.provider.ArgumentsProvider
import org.junit.jupiter.params.support.AnnotationConsumer

/**
 * An [ArgumentsProvider] and [AnnotationConsumer] for [CsvAutoKotlinSource].
 *
 * This class provides arguments for JUnit 5 parameterized tests, sourcing them
 * from CSV-like input defined in a [CsvAutoKotlinSource] annotation. It adapts
 * the functionality of [CsvAutoArgumentsProvider] for Kotlin tests,
 * allowing remaining parameters not covered by the CSV to be automatically
 * generated by AutoParams, with Kotlin-specific considerations.
 *
 * @see CsvAutoKotlinSource
 * @see CsvAutoArgumentsProvider
 */
class CsvAutoKotlinArgumentsProvider :
    ArgumentsProvider,
    AnnotationConsumer<CsvAutoKotlinSource> {

    private val provider = CsvAutoArgumentsProvider()

    /**
     * Provides a stream of arguments for a parameterized test.
     *
     * This method delegates to an underlying [CsvAutoArgumentsProvider] to
     * provide arguments sourced from CSV data and supplemented by AutoParams
     * for any remaining parameters, with Kotlin-specific considerations.
     *
     * @param context The extension context for the current test.
     * @return A stream of [Arguments] to be used by the parameterized test.
     */
    override fun provideArguments(
        context: ExtensionContext
    ): Stream<out Arguments> = provider.provideArguments(context)

    /**
     * Consumes the [CsvAutoKotlinSource] annotation to configure the underlying
     * argument provider.
     *
     * This method extracts CSV-related attributes from the provided
     * [CsvAutoKotlinSource] annotation and uses them to configure an internal
     * [CsvAutoArgumentsProvider]. This setup allows the provider to correctly
     * parse CSV data and combine it with automatically generated arguments for
     * Kotlin parameterized tests.
     *
     * @param annotation The [CsvAutoKotlinSource] annotation instance to
     *                   consume.
     */
    override fun accept(annotation: CsvAutoKotlinSource) {
        provider.accept(
            CsvAutoSource.ProxyFactory.create(
                annotation.value,
                annotation.textBlock.trimIndent(),
                annotation.useHeadersInDisplayName,
                annotation.quoteCharacter,
                annotation.delimiter,
                annotation.delimiterString,
                annotation.emptyValue,
                annotation.nullValues,
                annotation.maxCharsPerColumn,
                annotation.ignoreLeadingAndTrailingWhitespace
            )
        )
    }
}
