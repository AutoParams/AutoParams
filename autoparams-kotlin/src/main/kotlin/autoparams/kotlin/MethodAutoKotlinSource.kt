package autoparams.kotlin

import java.lang.reflect.Proxy
import autoparams.customization.Customization
import org.junit.jupiter.params.provider.ArgumentsSource

/**
 * An extension of [org.junit.jupiter.params.provider.MethodSource] tailored for
 * Kotlin parameterized tests, integrating with AutoParams to provide
 * automatically generated arguments for parameters not covered by the source
 * method.
 *
 * This annotation allows you to specify a method that provides test data for a
 * parameterized test. AutoParams will automatically generate any parameters not
 * supplied by the source method, with Kotlin-specific considerations.
 *
 * **Example: Using MethodAutoKotlinSource in a parameterized test**
 *
 * This example demonstrates how [MethodAutoKotlinSource] can be used to provide
 * partial test data from a method, while AutoParams generates the remaining
 * values.
 *
 * ```kotlin
 * class MessageTests {
 *
 *     @ParameterizedTest
 *     @MethodAutoKotlinSource("messageProvider")
 *     fun testGreeting(prefix: String, name: String) {
 *         val message = "$prefix $name"
 *         assertTrue(message.startsWith(prefix))
 *         assertTrue(message.contains(name))
 *     }
 *
 *     companion object {
 *         @JvmStatic
 *         fun messageProvider() = Stream.of(
 *             Arguments.of("Hello"),
 *             Arguments.of("Hi")
 *         )
 *     }
 * }
 * ```
 *
 * In this example, the `prefix` parameter is supplied by the `messageProvider`
 * method, while the `name` parameter is automatically generated by AutoParams.
 *
 * @param value The names of the methods to use as sources of arguments.
 *              If empty, a method with the same name as the test method is used.
 *
 * @see MethodAutoKotlinArgumentsProvider
 * @see org.junit.jupiter.params.provider.MethodSource
 * @see autoparams.MethodAutoSource
 */
@Target(AnnotationTarget.ANNOTATION_CLASS, AnnotationTarget.FUNCTION)
@Retention(AnnotationRetention.RUNTIME)
@ArgumentsSource(MethodAutoKotlinArgumentsProvider::class)
@Customization(KotlinCustomizer::class)
annotation class MethodAutoKotlinSource(val value: Array<String> = [""]) {

    /**
     * A companion object that serves as a factory for creating proxy instances
     * of [MethodAutoKotlinSource].
     *
     * This factory can be used when extending the functionality of
     * [MethodAutoKotlinArgumentsProvider]. It allows for the programmatic
     * construction of [MethodAutoKotlinSource] annotation instances, enabling
     * dynamic configuration of method sources for parameterized tests in
     * Kotlin.
     */
    companion object ProxyFactory {

        /**
         * Creates a new proxy instance of [MethodAutoKotlinSource]
         * programmatically.
         *
         * This factory method constructs a proxy for the
         * [MethodAutoKotlinSource] annotation using the specified method names.
         * This allows the framework to work with these properties as if they
         * were declared directly on a test method.
         *
         * @param value The names of the methods to use as sources of arguments.
         *              If empty, a method with the same name as the test method
         *              is used.
         * @return A new proxy instance of [MethodAutoKotlinSource] configured
         *         with the provided method names.
         */
        fun create(value: Array<String>): MethodAutoKotlinSource {
            return Proxy.newProxyInstance(
                MethodAutoKotlinSource::class.java.classLoader,
                arrayOf(MethodAutoKotlinSource::class.java)
            ) { _, method, _ ->
                when (method.name) {
                    "annotationType" -> MethodAutoKotlinSource::class.java
                    "value" -> value
                    else -> method.defaultValue
                }
            } as MethodAutoKotlinSource
        }
    }
}
