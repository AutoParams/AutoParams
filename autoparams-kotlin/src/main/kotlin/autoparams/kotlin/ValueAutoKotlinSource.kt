package autoparams.kotlin

import java.lang.reflect.Proxy
import autoparams.customization.Customization
import org.junit.jupiter.params.provider.ArgumentsSource
import kotlin.reflect.KClass

/**
 * An extension of [org.junit.jupiter.params.provider.ValueSource] tailored for
 * Kotlin parameterized tests, integrating with AutoParams to provide
 * automatically generated arguments for parameters not covered by the
 * explicitly defined values.
 *
 * This annotation allows you to define test inputs as primitive literals or
 * strings directly within your test method's annotations. For each value in the
 * specified array, a new invocation of the parameterized test will be
 * scheduled. The first parameter of the test method will be populated from the
 * corresponding value in the array. AutoParams will automatically generate any
 * additional parameters not supplied by the value array, with Kotlin-specific
 * considerations.
 *
 * This is similar to [autoparams.ValueAutoSource] but is specifically designed
 * for Kotlin, leveraging [ValueAutoKotlinArgumentsProvider] and
 * [KotlinCustomizer].
 *
 * **Example: Using ValueAutoKotlinSource in a parameterized test**
 *
 * This example demonstrates how [ValueAutoKotlinSource] can be used to provide
 * explicit values for `name` from a predefined array, while other parameters
 * like `id` and `price` are automatically generated by AutoParams for each test
 * case.
 *
 * ```kotlin
 * data class Product(val id: UUID, val name: String, val price: BigDecimal)
 *
 * class ProductTests {
 *
 *     @ParameterizedTest
 *     @ValueAutoKotlinSource(strings = ["Product A", "Product B", "Product C"])
 *     fun `test product creation with explicit name and auto-generated values`(
 *         name: String, id: UUID, price: BigDecimal
 *     ) {
 *         val product = Product(id, name, price)
 *         assertTrue(product.name.startsWith("Product"))
 *         assertNotNull(product.id)
 *         assertNotNull(product.price)
 *     }
 * }
 * ```
 */
@Target(AnnotationTarget.ANNOTATION_CLASS, AnnotationTarget.FUNCTION)
@Retention(AnnotationRetention.RUNTIME)
@ArgumentsSource(ValueAutoKotlinArgumentsProvider::class)
@Customization(KotlinCustomizer::class)
annotation class ValueAutoKotlinSource(
    val shorts: ShortArray = [],
    val bytes: ByteArray = [],
    val ints: IntArray = [],
    val longs: LongArray = [],
    val floats: FloatArray = [],
    val doubles: DoubleArray = [],
    val chars: CharArray = [],
    val booleans: BooleanArray = [],
    val strings: Array<String> = [],
    val classes: Array<KClass<*>> = [],
) {

    /**
     * A companion object that serves as a factory for creating proxy instances
     * of [ValueAutoKotlinSource].
     *
     * This factory can be used when extending the functionality of
     * [ValueAutoKotlinArgumentsProvider]. It allows for the programmatic
     * construction of [ValueAutoKotlinSource] annotation instances, enabling
     * dynamic configuration of value data sources for parameterized tests in
     * Kotlin.
     */
    companion object ProxyFactory {

        /**
         * Creates a new proxy instance of [ValueAutoKotlinSource]
         * programmatically.
         *
         * This factory method is used internally to construct a proxy for the
         * [ValueAutoKotlinSource] annotation with the specified property
         * values. This allows the framework to work with these properties as if
         * they were declared directly on a test method.
         *
         * @param shorts An array of short values to be used as test parameters.
         * @param bytes An array of byte values to be used as test parameters.
         * @param ints An array of int values to be used as test parameters.
         * @param longs An array of long values to be used as test parameters.
         * @param floats An array of float values to be used as test parameters.
         * @param doubles An array of double values to be used as test
         *                parameters.
         * @param chars An array of char values to be used as test parameters.
         * @param booleans An array of boolean values to be used as test
         *                 parameters.
         * @param strings An array of String values to be used as test
         *                parameters.
         * @param classes An array of KClass values to be used as test
         *                parameters.
         * @return A new proxy instance of [ValueAutoKotlinSource] configured
         *         with the provided property values.
         */
        fun create(
            shorts: ShortArray,
            bytes: ByteArray,
            ints: IntArray,
            longs: LongArray,
            floats: FloatArray,
            doubles: DoubleArray,
            chars: CharArray,
            booleans: BooleanArray,
            strings: Array<String>,
            classes: Array<KClass<*>>
        ): ValueAutoKotlinSource {
            return Proxy.newProxyInstance(
                ValueAutoKotlinSource::class.java.classLoader,
                arrayOf(ValueAutoKotlinSource::class.java)
            ) { _, method, _ ->
                when (method.name) {
                    "annotationType" -> ValueAutoKotlinSource::class.java
                    "shorts" -> shorts
                    "bytes" -> bytes
                    "ints" -> ints
                    "longs" -> longs
                    "floats" -> floats
                    "doubles" -> doubles
                    "chars" -> chars
                    "booleans" -> booleans
                    "strings" -> strings
                    "classes" -> classes.map { it.java }.toTypedArray()
                    else -> method.defaultValue
                }
            } as ValueAutoKotlinSource
        }
    }
}
