import com.github.spotbugs.snom.SpotBugsTask

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'org.ec4j.editorconfig' version '0.0.3'
    id 'checkstyle'
    id 'com.github.spotbugs' version '4.7.0'
}

allprojects {
    repositories {
        mavenCentral()
        jcenter()
    }

    group = 'io.github.javaunit'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.ec4j.editorconfig'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.spotbugs'

    version = artifactVersion

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    editorconfig {
        excludes = ["build"]
    }

    check.dependsOn editorconfigCheck

    checkstyle {
        configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
        configProperties = ["suppressionFile": "${project.rootDir}/config/checkstyle/checkstyle/checkstyle-suppressions.xml"]
        toolVersion = "8.40"
        ignoreFailures = false
        maxErrors = 0
        maxWarnings = 0
    }

    spotbugs {
        ignoreFailures = false
        reportLevel = "high"
        spotbugsTest.enabled = false
    }

    tasks.withType(SpotBugsTask) {
        reports {
            text.enabled = true
            xml.enabled = false
            html.enabled = false
        }
    }

    tasks.register("printSpotbugsMain") {
        doLast {
            File mainResult = file("${buildDir}/reports/spotbugs/main.txt")
            if (mainResult.exists()) {
                mainResult.readLines().forEach {
                    println(it)
                }
            }
        }
    }

    tasks.getByPath("spotbugsMain").finalizedBy("printSpotbugsMain")

    publishing {
        repositories {
            maven {
                name "OSSRH"
                url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username System.getenv("MAVEN_USERNAME")
                    password System.getenv("MAVEN_PASSWORD")
                }
            }
        }

        publications {
            maven(MavenPublication) {
                artifactId artifactId
                from components.java
                pom {
                    name = artifactName
                    description = artifactDescription
                    url = "https://github.com/JavaUnit/AutoParams"
                    licenses {
                        license {
                            name = "MIT License"
                            url = "https://github.com/JavaUnit/AutoParams/blob/main/LICENSE"
                        }
                    }
                    developers {
                        developer {
                            id = "gyuwon"
                            name = "Gyuwon Yi"
                            email = "gyuwon@live.com"
                        }
                        developer {
                            id = "mhyeon.lee"
                            name = "Myeonghyeon Lee"
                            email = "mhyeon.lee@navercorp.com"
                        }
                    }
                    scm {
                        connection = "https://github.com/JavaUnit/AutoParams.git"
                        developerConnection = "https://github.com/JavaUnit/AutoParams.git"
                        url = "https://github.com/JavaUnit/AutoParams"
                    }
                }
            }
        }
    }

    signing {
        def signingKey = System.getenv("SIGNING_KEY")
        def signingPassword = System.getenv("SIGNING_PASSWORD")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.maven
    }
}
